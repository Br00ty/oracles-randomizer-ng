# some extra randomizer-specific "runtime" options are stored in sram and
# copied to unused bits in hMusicVolume. the options can be changed via button
# combinations on the file select screen.

common:
  00/: |
      define sramMagicString,a008 # 4 bytes
      define sramRandoVars,a00f

  # preserve extra bits in music volume, and always set actual volume to zero
  # if bit 2 is set.
  00/customSetMusicVolume: |
      push bc
      ld b,a
      ld a,(ff00+hMusicVolume)
      and a,7c
      or b
      pop bc
      bit 2,a
      jr z,.next
      and a,fc
      .next
      or a,80
      ld (ff00+hMusicVolume),a
      ret

  # preserve extra bits when applying music volume updates.
  00/customSaveMusicVolume: |
      and a,7f
      ld (ff00+hMusicVolume),a
      and a,03
      ret

  # use select + direction on file menu to toggle options. wrapper function
  # loads and unloads sram.
  02/checkChangeRandoVars: |
      push bc
      ld a,0a
      ld (1111),a
      call checkChangeRandoVars_body
      xor a
      ld (1111),a
      ld a,b
      pop bc
      ret
  02/checkChangeRandoVars_body: |
      ld a,(wKeysPressed)
      and a,04 # select button
      ld a,(ff00+hMusicVolume)
      ld c,a
      ld a,(wKeysJustPressed)
      ld b,a
      ret z
      cp a,10 # select + right = toggle music
      jr nz,.notRightDpad
      ld a,c
      xor a,04
      and a,7c
      ld (sramRandoVars),a
      bit 2,a
      jr nz,.musicOff
      or a,03
      .musicOff
      or a,80
      ld (ff00+hMusicVolume),a
      call setMusicVolume
      ret
      .notRightDpad
      cp a,20 # select + left = toggle gbc palette override
      ret nz
      ld a,c
      xor a,08
      ld c,a
      and a,7c
      ld (sramRandoVars),a
      ld a,c
      ld (ff00+hMusicVolume),a
      ld a,ff
      ld (ff00+hDirtyBgPalettes),a
      ld (ff00+hDirtySprPalettes),a
      ret

  # load custom vars from sram at startup, initializing the rando-specific
  # options if the magic string isn't present.
  03/customInit: |
      call clearMemory
      ld a,0a
      ld (1111),a
      ld de,romMagicString
      ld hl,sramMagicString
      ld b,4
      call copyAndCheckEqual
      ld a,(sramRandoVars)
      jr z,.initialized
      xor a
      ld (sramRandoVars),a
      .initialized
      ld (ff00+hMusicVolume),a
      ld b,a
      xor a
      ld (1111),a
      ld a,b
      bit 2,a
      ret z
      call setMusicVolume
      ret
  03/4027/: call customInit

  03/romMagicString: db 52,44,4d,5a # ascii "RDMZ"

  # copies b bytes from de to hl, setting z iff the dest was already equal to
  # the source.
  03/copyAndCheckEqual: |
      ld c,00
      .loop
      ld a,(de)
      inc de
      cp (hl)
      jr z,.equal
      ld c,01
      .equal
      ldi (hl),a
      dec b
      jr nz,.loop
      ld a,c
      or a
      ret

  # don't use gba palettes if bit 3 is set.
  3f/getPaletteGameboyType: |
      ld a,(ff00+hMusicVolume)
      bit 3,a
      ld a,01
      jr nz,.forcegbc
      ld a,(ff00+hGameboyType)
      .forcegbc
      inc a
      ret
  3f/403b/: call getPaletteGameboyType

seasons:
  00/0c89/: jp customSetMusicVolume
  00/0d06/: call customSaveMusicVolume; nop

  02/4427/: call checkChangeRandoVars

ages:
  00/0cad/: jp customSetMusicVolume
  00/0d2a/: call customSaveMusicVolume; nop

  02/4467/: call checkChangeRandoVars
