defines:
  # constants
  STARTING_TREE_MAP_INDEX: 0xf8

  # hram
  hBrokenTilePosition: 0x93
  hCameraY: 0xa8
  hCameraX: 0xaa
  hMusicVar: 0xb5 # used in filterMusic

  # wram
  wAnimalTutorialFlags: 0xc646
  wInventoryB: 0xc680
  wShieldLevel: 0xc6a9
  wSwordLevel: 0xc6ac
  wFeatherLevel: 0xc6b4
  wActiveRing: 0xc6c5
  wRingBoxLevel: 0xc6c6
  wRememberedCompanionRoom: 0xcc42
  wActiveGroup: 0xcc49
  wActiveRoom: 0xcc4c
  wRoomStateModifier: 0xcc4e
  wAreaFlags: 0xcc50
  wWarpDestGroup: 0xcc63
  wWarpDestIndex: 0xcc64
  wActiveTileType: 0xccb6

  # rom 00
  multiplyABy4: 0x01c3
  getRandomNumber: 0x041a
  copyMemory: 0x0462
  forceEnableIntroInputs: 0x0862
  playSound: 0x0c74
  setMusicVolume: 0x0c89
  giveTreasure: 0x16eb
  checkTreasureObtained: 0x1717
  refillSeedSatchel: 0x17e5
  showText: 0x184b
  getThisRoomFlags: 0x1956
  openMenu: 0x1a76
  lookupCollisionTable: 0x1ddd
  objectDelete_useActiveObjectType: 0x219e
  setGlobalFlag: 0x30cd
  setTile: 0x3a52
  getFreePartSlot: 0x3ea7

  # rom 02
  _closeMenu: 0x4f7b
  clearMenu: 0x5072
  _mapMenu_checkCursorRoomVisited: 0x655d
  _mapMenu_checkRoomVisited: 0x6560
  _ringMenu_updateSelectedRingFromList: 0x716c

  # rom 04
  applyAllTileSubstitutions: 0x5d94

  # rom 05
  _specialObjectGetRelativeTileWithDirectionTable: 0x44aa

  # rom 3f
  giveTreasure_body: 0x44c8

banks:
  0x00:
  # call a function hl in bank 02, preserving af. e can't be used as a
  # parameter to that function, but it can be returned.
  - callBank2: |
      push af
      ld e,02
      call interBankCall
      pop af
      ret

  # increment hl until (hl) equals either register a or ff. returns z if
  # a match was found.
  - searchValue: |
      push bc
      ld b,a
      .loop
      ldi a,(hl)
      cp b
      jr z,.match
      inc a
      jr z,.noMatch
      jr .loop
      .noMatch
      inc a
      .match
      ld a,b
      pop bc
      ret

  # search for a key bc in a dictionary starting at hl. the dictionary is
  # a series of two-byte keys and two-byte values. if a match is found,
  # hl is the address of the value, and z is set. the dictionary ends
  # when $ff is encountered at the beginning of an entry.
  - lookupWord: |
      .loop
      ldi a,(hl)
      cp a,ff
      jr nz,.next
      or a
      ret
      .next
      cp b
      ldi a,(hl)
      jr nz,.next2
      cp c
      ret z
      .next2
      inc hl
      inc hl
      jr .loop

  # force the item in the temple of seasons cutscene to use normal item
  # animations. TODO: i think there's a better way to do this, like the way
  # that the ages code handles item graphics on non-item interactions.
  - fixRodCutsceneGfx: |
      ld e,41
      ld a,(de)
      cp a,e6
      ret nz
      inc e
      ld a,(de)
      cp a,02
      jr z,.next
      dec e
      ld a,(de)
      ret
      .next
      ld a,60
      ret

  # set hl = address of treasure data + 1 for item with ID a, sub ID c. this
  # uses cdfd-cdff as scratch space.
  - getTreasureData: |
      push af
      push bc
      push de
      ld b,a
      ld e,15
      ld hl,getTreasureData_body
      call interBankCall
      pop de
      pop bc
      pop af
      ret

  # use cape graphics for stolen feather if applicable.
  # TODO: this doesn't appear to get calledâ€¦
  - upgradeStolenFeather: |
      call checkTreasureObtained
      ret c
      push af
      ld a,e
      cp a,17
      jr nz,.done
      push de
      ld e,43
      ld a,(de)
      cp a,02
      pop de
      jr nz,.done
      ld a,(wFeatherLevel)
      cp a,02
      jr nz,.done
      ld hl,3f89 # TODO: reference capeData instead
      .done
      pop af
      ret

  # data used by upgradeStolenFeather. (TODO: not actually used currently)
  - itemDataStolenCape: db 02,37,17

  # replacement treasure data to use when upgrading progressive items.
  - itemDataMirrorShield: db 03,21,15
  - itemDataNobleSword: db 02,1d,11
  - itemDataMasterSword: db 03,1e,12
  - itemDataMagicBoomerang: db 02,23,1d
  - itemDataHyperSlingshot: db 02,2f,22
  - itemDataRocsCape: db 02,28,17
  - itemDataSatchel2: db 00,46,20

  # change hl to point to different treasure data if the item is progressive
  # and needs to be upgraded. param a = treasure ID.
  - upgradeProgressiveItem: |
      push de
      ld e,a
      call upgradeStolenFeather
      ld a,e
      pop de
      ret nc
      cp a,01
      jr nz,.notShield
      ld a,(wShieldLevel)
      cp a,02
      ret nz
      ld hl,itemDataMirrorShield
      ret
      .notShield
      cp a,05
      jr nz,.notSword
      ld a,(wSwordLevel)
      cp a,02
      jr z,.masterSword
      ld hl,itemDataNobleSword
      ret
      .masterSword
      ld hl,itemDataMasterSword
      ret
      .notSword
      cp a,06
      jr nz,.notBoomerang
      ld hl,itemDataMagicBoomerang
      ret
      .notBoomerang
      cp a,13
      jr nz,.notHSS
      ld hl,itemDataHyperSlingshot
      ret
      .notHSS
      cp a,17
      jr nz,.notCape
      ld hl,itemDataRocsCape
      ret
      .notCape
      cp a,19
      ret nz
      ld hl,itemDataSatchel2
      ret

  # this is a replacement for giveTreasure that gives treasure, plays sound,
  # sets text based on item ID a and sub ID c, and accounts for item
  # progression.
  - giveTreasureCustom: |
      call getTreasureData
      ld b,a
      call upgradeProgressiveItem
      ld a,b
      ld c,(hl)
      call giveTreasure
      jr z,.noSound
      push hl
      call playSound
      pop hl
      .noSound
      ld b,00
      inc hl
      ld c,(hl)
      ld a,c
      cp a,ff
      ret z
      call showText
      xor a
      ret

  # override room layout with bank 02's winterLayout when appropriate.
  - loadWinterLayout: |
      push de
      ld a,(wRoomStateModifier)
      cp a,03
      jr nz,.done
      push bc
      ld bc,9d00
      call compareRoom
      pop bc
      jr nz,.done
      ld a,02
      ld (ff00+8c),a
      ld hl,winterLayout
      .done
      ld a,(ff00+8c)
      jp 39e2 # can't just ret, idr why

  0x01:
  # takes b = high byte of season addr, returns season in b.
  - readDefaultSeason: |
      ld h,7e
      ld l,b
      ld a,(hl)
      ld b,a
      ret

  0x02:
  # warp to ember tree if holding start when closing the map screen.
  - treeWarp: |
      ld a,(wKeysPressed)
      and a,08
      jr z,.done
      ld a,(wAreaFlags)
      and a,01
      jr nz,.warp
      ld a,5a
      jp playSound
      .warp
      ld hl,cbb7
      ld (hl),05
      xor a
      call 5e7b
      .done
      jp _closeMenu

  # custom room layout for the problematic woods of winter screen in winter.
  # the code here is one 8-tile compression block per line.
  - winterLayout: |
      db 55,80,81,81,81,81
      db 7c,16,80,82,17
      db f0,1b,c4,c4,70,72
      db 00,01,0d,17,c4,80,81,70,71
      db 60,04,70,71,1a,1b,1c,f7
      db 05,80,81,81,70,71,9e,9e
      db 1c,16,04,15,17,80,81
      db 30,1b,99,9b,d9,1a,01,19
      db 00,70,71,15,16,17,f7,7a,8c
      db 11,18,19,80,81,01,19,70

  0x04:
  # data for applyAllTileSubstitutions: group,room,flags,yx,tile
  - tileSubTable: |
      db 00,01,01,52,04 # permanently remove flower outside D6 when cut
      db 00,5c,00,64,48 # extend moblin keep railing as chokept for warning
      db 00,5c,00,74,53 # cont.
      db 00,9a,00,14,12 # remove rock across pit blocking exit from D5
      db 00,8a,00,66,64 # ^ but add rock at bottom of cliff to block ricky
      db 00,9a,00,34,04 # remove bush next to rosa portal
      db 00,b0,00,21,13 # remove spool swamp pits to prevent winter softlock
      db 00,b0,00,51,13 # cont.
      db ff

  # data for checkSetAnimalSavePoint:
  # entered group, entered room, animal room, saved y, saved x, 00.
  - animalSavePointTable: |
      db 04,fa,c2,18,68,00 # spool swamp cave
      db 05,cc,2a,38,18,00 # goron mountain east cave
      db 05,b3,8e,58,88,00 # cave outside d2
      db 04,e1,86,48,68,00 # cave north of d1
      db 05,c9,2a,38,18,00 # goron mountain main
      db 05,ba,2f,18,68,00 # spring banana cave
      db 05,bb,2f,18,68,00 # cave below spring banana cave
      db 01,05,9a,38,48,00 # rosa portal
      db 04,39,8d,38,38,00 # d2 entrance
      db ff

  # if entering certain warps blocked by snow piles, mushrooms, or bushes, set
  # the animal companion to appear right outside the entrance instead of where
  # you left them.
  - checkSetAnimalSavePoint: |
      push bc
      push de
      ld b,a
      ld a,(wWarpDestIndex)
      ld c,a
      ld a,(wRememberedCompanionRoom)
      ld d,a
      ld hl,animalSavePointTable
      .loop
      ldi a,(hl)
      cp b
      jr nz,.incUntilNextEntry
      ldi a,(hl)
      cp c
      jr nz,.incUntilNextEntry
      ld a,(hl)
      cp d
      jr nz,.incUntilNextEntry
      ld de,wRememberedCompanionRoom
      ld b,03
      call copyMemory
      jr .done
      .incUntilNextEntry
      ldi a,(hl)
      or a
      jr nz,.incUntilNextEntry
      ld a,(hl)
      inc a
      jr z,.done
      jr .loop
      .done
      ld a,c
      pop de
      pop bc
      ret

  0x05:
  # let link jump down the cliff outside d7, in case of winter sans shovel.
  # also let link jump down the snow cliff added in woods of winter. also call
  # devJump if applicable.
  - cliffLookup: |
      call devJump
      ret c
      push af
      ld a,(wActiveGroup)
      or a
      jr nz,.noJumpPopAf
      ld a,(wActiveRoom)
      cp a,d0
      jr nz,.notD7Entrance
      pop af
      cp a,a8
      jr nz,.noJump
      ld a,08
      scf
      ret
      .notD7Entrance
      cp a,9d
      jr nz,.noJumpPopAf
      pop af
      cp a,99
      jr z,.snowJump
      cp a,9b
      jr nz,.noJump
      .snowJump
      ld a,10
      scf
      ret
      .noJumpPopAf
      pop af
      .noJump
      jp lookupCollisionTable

  # do this so that animals don't immediately stop walking onscreen when called
  # on a bridge, namely the one to/from d1.
  - animalEntryIgnoreBridges: |
      call _specialObjectGetRelativeTileWithDirectionTable
      or a
      ret z
      cp a,1a
      ret z
      cp a,1b
      ret

  # this is called to make moosh unrideable on mt cucco in the case of not
  # having flute in a moosh seed.
  - checkFlute: |
      ld a,0e
      jp checkTreasureObtained

  0x06:
  # unset a room flag when the flower outside D6 is broken. see tileSubTable.
  - checkBreakD6Flower: |
      push af
      push bc
      ld bc,0100
      call compareRoom
      pop bc
      jr nz,.done
      ld a,(ff00+hBrokenTilePosition)
      cp a,52
      jr nz,.done
      push hl
      ld hl,c701
      res 0,(hl)
      pop hl
      .done
      pop af
      jp setTile

  # replace a random item drop with gale seeds 1/4 of the time if the player is
  # out of gale seeds. just to be nice since warping out of one-ways is in
  # logic.
  - dropExtraGalesOnEmpty: |
      ld a,TREASURE_GALE_SEEDS
      call checkTreasureObtained
      jr nc,.done
      ld l,b8
      or (hl)
      jr nz,.done
      call getRandomNumber
      cp a,40
      jr nc,.done
      ld c,08
      .done
      call getFreePartSlot
      ret

  0x07:
  # if wearing dev ring, change season regardless of where link is standing.
  - devChangeSeason: |
      ld a,(wActiveRing)
      cp a,40
      ret z
      ld a,(wActiveTileType)
      cp a,08
      ret

  0x0a:
  # flags in wGlobalFlags to be set at start of game.
  - initialGlobalFlags: |
      db 0a,1c,ff

  # in linked, start with the item that *would* be in the d0 sword chest
  # instead of the sword.
  - giveLinkedStartItem: |
      ld a,(7ffe)
      ld c,a
      ld a,(7ffd)
      ld (c682),a
      call giveTreasure
      xor a
      ld (wInventoryB),a
      ret

  # set flags to skip opening and a bunch of other things. see
  # doc/technical.md for a dictionary of the flags.
  - setInitialFlags: |
      # global flags
      push hl
      ld hl,initialGlobalFlags
      .loop
      ldi a,(hl)
      cp a,ff
      jr z,.done
      push hl
      call setGlobalFlag
      pop hl
      jr .loop
      .done
      pop hl

      # animal vars
      ld a,(7fff)
      ld (wAnimalRegion),a
      ld a,ff
      ld (wAnimalTutorialFlags),a

      # linked start item
      ld a,(wIsLinkedGame)
      or a
      call nz,giveLinkedStartItem

      # room flags 4 | 6
      ld a,50
      ld (c7a7),a

      # room flags 5 | 6
      ld a,60
      ld (c79a),a

      # room flags 6 | 7
      ld a,c0
      ld (c798),a
      ld (c7cb),a

      # room flag 6
      ld a,40
      ld (c7b6),a
      ld (c82a),a
      ld (c800),a
      ld (c700),a
      ld (c796),a
      ld (c78d),a
      ld (c760),a
      ld (c7d0),a
      ld (c71d),a
      ld (c78a),a
      ld (c7e9),a
      ld (c79b),a
      ld (c829),a

      # room flag 0
      ld a,01
      ld (c701),a # flag determines whether flower/rock tile exists

      # give L-3 ring box
      ld a,10
      ld (c697),a
      ld a,03
      ld (wRingBoxLevel),a

      ret

  0x0b:
  # custom script command to use on d1 entrance screen: set ccaa to 01 until
  # bit of cfc0 is set. fixes a vanilla bug where dismounting an animal on
  # that screen allowed you to enter without the key.
  - d1EntranceScriptCmd: |
      pop hl
      push bc
      ld bc,9600
      call compareRoom
      pop bc
      ret nz
      ld a,01
      ld (ccaa),a
      xor a
      jp 432d

  0x15:
  # body of getTreasureData in bank 00.
  - getTreasureData_body: |
      ld a,b
      push bc
      ld hl,5129 # pointer table for treasure data
      .loop
      call multiplyABy4
      add hl,bc
      bit 7,(hl)
      jr z,.done
      inc hl
      ldi a,(hl)
      ld h,(hl)
      ld l,a
      pop bc
      ld a,c
      push bc
      jr .loop
      .done
      inc hl
      ld b,03
      push de
      ld de,cdfd
      call copyMemory
      ld hl,cdfd
      pop de
      pop bc
      ret

  0x3f:
  # have seed satchel inherently refill all seeds.
  - satchelRefillSeeds: |
      push bc
      call giveTreasure_body
      ld a,b
      pop bc
      push af
      ld a,b
      cp a,19
      jr nz,.notSatchel
      push bc
      push de
      call refillSeedSatchel
      pop de
      pop bc
      .notSatchel
      pop af
      ld b,a
      ret
